/* -*- P4_16 -*- */
#include <core.p4>
#include <v1model.p4>

const bit<16> TYPE_IPV4 = 0x800; /* ETHERTYPE_IPV4 */
const bit<16> TYPE_ARP = 0x806;  /* ETHERTYPE_ARP */
const bit<8> IPPROTO_ICMP = 0x01;

/*************************************************************************
*********************** H E A D E R S  ***********************************
*************************************************************************/

typedef bit<9>  egressSpec_t; /* prot_id_t */
typedef bit<48> macAddr_t;    /* mac_addr_t */
typedef bit<32> ip4Addr_t;    /* ipv4_addr_t */

header ethernet_t { /* ethernet协议报头文件 */
    macAddr_t dstAddr; /* 目的MAC */
    macAddr_t srcAddr; /* 源MAC */
    bit<16>   etherType; /* 数据字段协议 */
}

header ipv4_t { /* IPv4协议标准报头 */
    bit<4>    version;     /* 版本 */
    bit<4>    ihl;         /* 首部长度 */
    bit<8>    diffserv;    /* 区分服务 */
    bit<16>   totalLen;
    bit<16>   identification;
    bit<3>    flags;
    bit<13>   fragOffset;
    bit<8>    ttl;
    bit<8>    protocol;
    bit<16>   hdrChecksum;
    ip4Addr_t srcAddr;
    ip4Addr_t dstAddr;
}

const bit<16> ARP_HTYPE_ETHERNET = 0x0001;
const bit<16> ARP_PTYPE_IPV4 = 0x800;
const bit<8> ARP_HLEN_ETHERNET = 6;
const bit<8> ARP_PLEN_IPV4 = 4;
const bit<16> ARP_OPER_REQUEST = 1;
const bit<16> ARP_OPER_REPLY = 2;

header arp_t {  /* ARP报头信息部分 */
    bit<16> htype; /* 硬件类型 */
    bit<16> ptype; /* 协议类型 */
    bit<8> hlen;   /* 硬件地址长度 */
    bit<8> plen;   /* 协议地址长度 */
    bit<16> oper;  /* 操作类型 */
}

header arp_ipv4_t {  /* ARP报头地址部分 */
    macAddr_t sha; /* 发送方硬件地址 */
    ip4Addr_t spa; /* 发送方IP地址 */
    macAddr_t tha; /* 目标硬件地址 */
    ip4Addr_t tpa; /* 目标IP地址 */
}

const bit<8> ICMP_ECHO_REQUEST = 8; /* ICMP回显请求 8为ICMP类型中回显请求对应的TYPE值 */
const bit<8> ICMP_ECHO_REPLY = 0; /* ICMP回显应答 0为ICMP类型中回显应答对应的TYPE值 */

header icmp_t {
    bit<8> type; /* ICMP类型 */
    bit<8> code; /* ICMP代码 */
    bit<16> checksum; /* ICMP校验和 */
}

struct metadata { /* 声明一个所需的元数据集合 */
    ip4Addr_t dst_ipv4;
    macAddr_t mac_da;
    macAddr_t mac_sa;
    egressSpec_t egress_port;
    macAddr_t my_mac;
}

struct headers { /* 声明所有所涉及的头部变量集合 */
    ethernet_t   ethernet;
    ipv4_t       ipv4;
    arp_t        arp;
    arp_ipv4_t   arp_ipv4;
    icmp_t       icmp;
}

/*************************************************************************
*********************** P A R S E R  ***********************************
*************************************************************************/

parser MyParser(packet_in packet,
                out headers hdr,
                inout metadata meta,
                inout standard_metadata_t standard_metadata) {

    state start {
        transition parse_ethernet;  /* 首先转入 Ethernet包部分的提取分析 */
    }

    state parse_ethernet {
        packet.extract(hdr.ethernet);  /* 提取出头部集合中的 Ethernet协议部分 */
        transition select(hdr.ethernet.etherType) {  /* 根据数据字段协议的内容判断接下来转入哪部分进行分析 */
            TYPE_IPV4: parse_ipv4;
            TYPE_ARP: parse_arp;
            default: accept;
        }
    }

    state parse_ipv4 {
        packet.extract(hdr.ipv4);  /* 提取出头部集合中的 IPv4协议部分 */
        meta.dst_ipv4 = hdr.ipv4.dstAddr; /* 将IPv4报头的目的地址赋值给元数据变量 */
        transition select(hdr.ipv4.protocol) { /* 根据IPv4 头部的协议判断是否进行ICMP报文提取 */
            IPPROTO_ICMP: parse_icmp;
            default: accept;
        }
    }

    state parse_icmp {
        packet.extract(hdr.icmp);
        transition accept;
    }

    state parse_arp {
        packet.extract(hdr.arp);  /* 提取出头部集合中的 ARP报文的信息部分 */
        transition select(hdr.arp.htype, hdr.arp.ptype,hdr.arp.hlen,  hdr.arp.plen) {
            (ARP_HTYPE_ETHERNET, ARP_PTYPE_IPV4,ARP_HLEN_ETHERNET,  ARP_PLEN_IPV4): parse_arp_ipv4;
            /* 只有当提取到的 硬件、协议类型，硬件、协议地址长度均符合预设条件时才进行 ARP报文中地址的转换 */
            default: accept;
        }
    }

    state parse_arp_ipv4 {
        packet.extract(hdr.arp_ipv4);  /* 提取出头部集合中的 ARP报文的地址部分 */
        meta.dst_ipv4 = hdr.arp_ipv4.tpa; /* 将ARP报文中目的IP地址赋值给元数据中的目的IP地址 */
        transition accept;
    }

}

/*************************************************************************
************   C H E C K S U M    V E R I F I C A T I O N   *************
*************************************************************************/

control MyVerifyChecksum(inout headers hdr, inout metadata meta) {
    apply {  }
}


/*************************************************************************
**************  I N G R E S S   P R O C E S S I N G   *******************
*************************************************************************/

control MyIngress(inout headers hdr,
                  inout metadata meta,
                  inout standard_metadata_t standard_metadata) {
    action drop() {
        mark_to_drop(standard_metadata);
    }

    action ipv4_forward() {
        standard_metadata.egress_spec = meta.egress_port;
        hdr.ethernet.srcAddr = meta.mac_sa;
        hdr.ethernet.dstAddr = meta.mac_da;
        hdr.ipv4.ttl = hdr.ipv4.ttl - 1;
    }

    action set_dst_info(macAddr_t mac_da, macAddr_t mac_sa, egressSpec_t  egress_port) {
        meta.mac_da = mac_da;
        meta.mac_sa = mac_sa;
        meta.egress_port = egress_port;
    }

    action send_arp_reply() {  /* 发送ARP回复报文 */
        hdr.ethernet.dstAddr = hdr.arp_ipv4.sha;
        hdr.ethernet.srcAddr = meta.mac_da;
        hdr.arp.oper = ARP_OPER_REPLY;  /* 将ARP报文的类型更改为回复类型 */
        hdr.arp_ipv4.tha = hdr.arp_ipv4.sha;  /* 调换原ARP报文中的源地址和目的地址 */
        hdr.arp_ipv4.tpa = hdr.arp_ipv4.spa;
        hdr.arp_ipv4.sha = meta.mac_da;
        hdr.arp_ipv4.spa = meta.dst_ipv4;
        standard_metadata.egress_spec = standard_metadata.ingress_port;
    }

    action send_icmp_reply() {   /* 发送ICMP回复报文 */
        macAddr_t   tmp_mac;  /* 设置两个临时变量用于交换源地址与目的地址 */
        ip4Addr_t  tmp_ip;
        tmp_mac = hdr.ethernet.dstAddr;
        hdr.ethernet.dstAddr = hdr.ethernet.srcAddr;
        hdr.ethernet.srcAddr = tmp_mac;
        tmp_ip = hdr.ipv4.dstAddr;
        hdr.ipv4.dstAddr = hdr.ipv4.srcAddr;
        hdr.ipv4.srcAddr = tmp_ip;
        hdr.icmp.type = ICMP_ECHO_REPLY;  /* 设置ICMP报文的类型为 回显响应 */
        hdr.icmp.checksum = 0;
        standard_metadata.egress_spec = standard_metadata.ingress_port;
    }

    table ipv4_lpm {
        key = {
            hdr.ipv4.dstAddr: lpm;
        }
        actions = {
            set_dst_info;
            drop;
            NoAction;
        }
        size = 1024;
        default_action = drop();
    }

    table forward {
        key = {
            hdr.arp.isValid()      : exact;
            hdr.arp.oper           : ternary;
            hdr.arp_ipv4.isValid() : exact;
            hdr.ipv4.isValid()     : exact;
            hdr.icmp.isValid()     : exact;
            hdr.icmp.type          : ternary;
        }
        actions = {
            forward_ipv4;
            send_arp_reply;
            send_icmp_reply;
            drop;
        }
        const default_action = drop();
        const entries = {
            ( true, ARP_OPER_REQUEST, true, false, false, _  ) : send_arp_reply();
            ( false, _, false, true, false, _  ) : forward_ipv4();
            ( false, _, false, true, true, ICMP_ECHO_REQUEST ) : send_icmp_reply();
        }
    }

    apply {
        meta.my_mac = 0x000102030405;
        ipv4_lpm.apply();
        forward.apply();
    }
}

/*************************************************************************
****************  E G R E S S   P R O C E S S I N G   *******************
*************************************************************************/

control MyEgress(inout headers hdr,
                 inout metadata meta,
                 inout standard_metadata_t standard_metadata) {
    apply {  }
}

/*************************************************************************
*************   C H E C K S U M    C O M P U T A T I O N   **************
*************************************************************************/

control MyComputeChecksum(inout headers  hdr, inout metadata meta) {
     apply {  }
}

/*************************************************************************
***********************  D E P A R S E R  *******************************
*************************************************************************/

control MyDeparser(packet_out packet, in headers hdr) {
    apply {
        packet.emit(hdr.ethernet);
        /* ARP Case */
        packet.emit(hdr.arp);
        packet.emit(hdr.arp_ipv4);
        /* IPv4 case */
        packet.emit(hdr.ipv4);
        packet.emit(hdr.icmp);
    }
}

/*************************************************************************
***********************  S W I T C H  *******************************
*************************************************************************/

V1Switch(
MyParser(),
MyVerifyChecksum(),
MyIngress(),
MyEgress(),
MyComputeChecksum(),
MyDeparser()
) main;
